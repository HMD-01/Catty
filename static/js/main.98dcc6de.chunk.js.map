{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js","components/animatedLoader.gif"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","Cardlist","cats","cardArray","map","cat","i","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","pussyCats","filteredCats","this","filter","toLowerCase","includes","length","Loader","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCHSC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,yBAAKC,UAAU,2DACd,yBAAKC,IAAG,wCAAmCJ,EAAnC,iBAAsDK,IAAI,UAClE,6BACC,4BAAKJ,GACL,2BAAIC,MCMOI,EAXE,SAAC,GAAW,IAAVC,EAAS,EAATA,KACZC,EAAYD,EAAKE,KAAI,SAACC,EAAIC,GAC/B,OAAO,kBAAC,EAAD,CAAMX,GAAIO,EAAKI,GAAGX,GAAIC,KAAMM,EAAKI,GAAGV,KAAMC,MAAOK,EAAKI,GAAGT,WAEjE,OACC,6BACEM,ICKWI,G,KAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,6BACC,2BACCC,KAAK,SACLC,YAAY,cACZC,SAAUH,O,gBCCCI,EAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACtCH,EAAMI,WCgDKC,E,YA3Cd,aAAc,IAAD,8BACZ,+CAYDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZzC,EAAKC,MAAQ,CACZvB,KAAM,GACNoB,YAAa,IAJF,E,iFAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAc,EAAKT,SAAS,CAACnB,KAAM4B,S,+BAOnC,IAAD,OACDC,EAAeC,KAAKP,MAAMvB,KAAK+B,QAAO,SAAA5B,GAC3C,OAAOA,EAAIT,KAAKsC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAG/D,OAA4B,IAAxBH,EAAaK,OAEf,yBAAKtC,UAAU,MACd,yBAAKC,IAAKsC,IAAQrC,IAAI,aAKvB,yBAAKF,UAAU,MACd,0CACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,KAAM6B,U,GApCJO,IAAMC,W,MCDxBC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SNyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB,sCOrInBC,EAAOC,QAAU,IAA0B,6C","file":"static/js/main.98dcc6de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow dim bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/set_set4/${id}?size=200x200`} alt='pussy'/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({cats}) =>{\r\n\tconst cardArray = cats.map((cat,i)=> {\r\n\t\treturn <Card id={cats[i].id} name={cats[i].name} email={cats[i].email} />;\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder='search cats' \r\n\t\t\t\tonChange={searchchange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', height:'400px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>)\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\n// import {cats} from './Cats';\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Loader from '../components/animatedLoader.gif';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcats: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(pussyCats => {this.setState({cats: pussyCats})})\t  \t\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredCats = this.state.cats.filter(cat => {\r\n\t\t\treturn cat.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\r\n\t\tif (filteredCats.length === 0){\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<img src={Loader} alt='Loading' />\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Pussy Cats</h1>\r\n\t\t\t\t\t<SearchBox searchchange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<Cardlist cats={filteredCats} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t} \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nimport 'tachyons';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/animatedLoader.680d0347.gif\";"],"sourceRoot":""}